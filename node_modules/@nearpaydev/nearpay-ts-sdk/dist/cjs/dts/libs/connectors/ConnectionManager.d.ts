import { NearpayLibProvider } from "../lib-provider";
import { COMMAND_WORD, RemoteJobRequest } from "../payload/types";
type SendMessageOptions = {
    timeout?: number;
};
/**
 * ConnectionManager is responsible for managing the messages sent by the sdk
 * ConnectionManager can accept the messages (mark them as recived) and
 * cancel messages (make htem rejected with  reason)
 *
 * all messages from the SDK should go throgh the ConnectionManager with the sendMessage function
 *
 * have access to the provider
 */
export declare class ConnectionManager {
    private lib_provider;
    /**
     * saves the messages that are pending now
     * message should be cleared after recive or reject
     */
    private inbox;
    constructor(lib_provider: NearpayLibProvider);
    /**
     * register a message to the pos inbox
     * to be precise it doesnot send the message, it wraps the sending
     *
     * @param jobId jobId for message
     * @param sendFunction the function that is used to send
     * @param options options for the send
     * @returns the promise for response
     */
    sendJob(jobId: string, payload: RemoteJobRequest<any>, sendFunction: () => Promise<void> | void, { timeout }?: SendMessageOptions): Promise<any>;
    /**
     * handle the command recived, command can be found in COMMAND_WORD
     *
     * @param cmd command to handle
     */
    reviceCommand(cmd: COMMAND_WORD): Promise<void>;
    /**
     * mark a job as recived and resolve a value
     *
     * @param jobId of the recived message
     * @param data data to resolve
     */
    reciveJob(jobId: string, data: object): Promise<void>;
    /**
     * reject a message for reson
     *
     * @param jobId id for message to reject
     * @param reason reson for rejection
     */
    rejectJob(jobId: string, reason?: string): Promise<void>;
    /**
     * reject all messages
     * @param reason reson for rejection
     */
    rejectAllJobs(reason?: string): Promise<void>;
    /**
     * reject last message
     *
     * @param reason reson for rejection
     */
    rejectLastJob(reason?: string): Promise<void>;
    /**
     * @returns number of pending messages in the inbox
     */
    hasPendingJob(): boolean;
    private sendCancel;
}
export {};
