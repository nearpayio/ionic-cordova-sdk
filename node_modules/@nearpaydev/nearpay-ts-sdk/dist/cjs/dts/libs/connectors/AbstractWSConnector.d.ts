import { ConnectorDisconnectOptions } from "../types";
import { NearpayConnector } from "./AbstractConnector";
import { RemoteJobRequest } from "../payload/types";
/**
 * abstract ws connector
 * used to conect to websocket service
 *
 * the class will contain the main info and functionality
 * of creating a websocket connection like connect, disconnect, reconnect,
 * event handlers (open, close, etc) and the pay method
 *
 * for now (14/12/2022)
 */
export declare abstract class AbstractWSConnector extends NearpayConnector {
    protected is_connected: boolean;
    protected device: WebSocket | undefined;
    protected is_reconnecting: boolean;
    protected error: boolean;
    disconnect(options?: ConnectorDisconnectOptions | undefined): void;
    reconnect(profileId: string): Promise<void>;
    protected onConnected(): void;
    protected onDisconnected(e: any): void;
    protected onError(e: any): void;
    protected onMessage(event: MessageEvent<any>): Promise<void>;
    isConnected(): boolean;
    send(data: RemoteJobRequest<any>): Promise<any>;
    protected WsConnect(url: string): Promise<void>;
}
