import { NearpayConnector } from "./connectors/AbstractConnector";
import { ConnectionManager } from "./connectors/ConnectionManager";
import Nearpay from "./lib";
import { NearpayListener } from "./listener/NearpayListener";
import { Terminal } from "./terminal/terminal";
/**
 * NearpayLibProvider is used to provide classes internally to Nearpay object
 *
 * the provided object can also use any class provided from NearpayLibProvider
 *
 * NearpayLibProvider is meant to be internal use only, client cant use it
 *
 * the idea of the provider is that all classes will be added and accessed easily, also ot adds a level of abstraction
 * to the code, so the NearPay object will show only the required method
 *
 * for example, the provider will provide listener and connection manager to nearpay object, then
 * listener will have eccess to connection manager and nearpay, and connection manger will have the same case
 */
export declare class NearpayLibProvider {
    constructor(nearpay: Nearpay);
    /**
     *  (2/1/2023)
     * terminal added to handle the transaction
     * it will be returned from the login function
     *
     * it should be updated every time the login function is called, to
     * keep the object consestent around the application
     */
    private terminal;
    private nearpay;
    private listener;
    private connector;
    private connection_manager;
    getTerminal(): Terminal;
    getNearpay(): Nearpay;
    getListener(): NearpayListener;
    getConnector(): NearpayConnector | undefined;
    getConnectionManager(): ConnectionManager;
    setConnector(connector: NearpayConnector | undefined): void;
}
