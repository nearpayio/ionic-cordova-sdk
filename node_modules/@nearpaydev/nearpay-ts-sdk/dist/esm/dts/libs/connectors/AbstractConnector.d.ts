import { ConnectorDisconnectOptions } from "../types";
import Nearpay from "../lib";
import { NearpayListener } from "../listener/NearpayListener";
import { ConnectionManager } from "./ConnectionManager";
import { ConnectionInfo, ConnectorInfo, NEARPAY_CONNECTOR } from "./types";
/**
 * Connectors are the part that connects the SDK with the
 * POS device, this is an abstract connector that will be inherited
 * by every connector implementation
 *
 * every connector will have its special way of
 * connecting and disconnecting, but this is general notes:
 *  1- connection should be async funciton that will resolve only when
 *      connection is estableshed
 *  2- diconnection could happen in 2 ways, intended and not-intended:
 *      every implementation should take care of both cases, the intended disconnect
 *      will generate a LOGOUT event, but the unintended will generate DISCONNECT
 */
export declare class NearpayConnector {
    protected nearpay: Nearpay;
    protected connection_manager: ConnectionManager;
    protected listener: NearpayListener;
    protected connectionInfo: ConnectionInfo;
    /**
     *  return a string on error indicating the error, or
     *  else it will return undefined if it success
     */
    connect(profileId: string): Promise<void>;
    /**
     * important note: this function should handle only the regular disconnections
     * not the manual ones!
     *
     * manual disconnect (logout) will be handled using the releaseconnector
     * function in nearpay object
     */
    disconnect(options: ConnectorDisconnectOptions | undefined): void;
    send(data: object): Promise<any>;
    reconnect(profileId: string): Promise<void>;
    isConnected(): boolean;
    getType(): NEARPAY_CONNECTOR | undefined;
    getName(): string;
    getInfo(): Promise<ConnectorInfo>;
    getConnectionInfo(): ConnectionInfo | undefined;
    constructor(nearpay: Nearpay, connection_manager: ConnectionManager, listener: NearpayListener, connectionInfo: ConnectionInfo);
}
